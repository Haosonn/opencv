#version 450
#extension GL_EXT_debug_printf : enable
#define KSTRIP_LEN 32
#define BLOCK_SIZE 64
#define WARP 32

#define INNER_THREAD 16 // inner thread
#define ALL_THREAD 256

#define A_INSTRIP 8
#define A_STRIP 8 // (BLOCK_SIZE/A_INSTRIP)

#define B_INSTRIP 4 // (ALL_THREAD/BLOCK_SIZE)
#define B_STRIP 8 // (KSTRIP_LEN/B_INSTRIP)

#define MNSTRIP (BLOCK_SIZE/INNER_THREAD)
#define KSTRIP (KSTRIP_LEN/INNER_THREAD)

#define PER_THREAD (BLOCK_SIZE/INNER_THREAD)

// Experiment Row major VS column major.

layout(binding = 0) readonly buffer Input1{
    float input1[];
};
layout(binding = 1) readonly buffer Input2{
    float input2[];
};
layout(binding = 2) writeonly buffer Output{
    float outMat_data[];
};
layout(binding = 3) uniform Params {
    int opType;
    int ninputs;
    int max_ndims;
} params;
layout(binding = 4) uniform Shape {
    int shape[];
};
layout(binding = 5) uniform Step {
    int step[];
};

shared float ashare[KSTRIP_LEN][BLOCK_SIZE]; // 2 KB
shared float bshare[BLOCK_SIZE][KSTRIP_LEN]; // 2 KB

layout(local_size_x = ALL_THREAD, local_size_y = 1, local_size_z = 1) in;

const int AND = 0;
const int EQUAL = 1;
const int GREATER = 2;
const int GREATER_EQUAL = 3;
const int LESS = 4;
const int LESS_EQUAL = 5;
const int OR = 6;
const int POW = 7;
const int XOR = 8;
const int BITSHIFT = 9;
const int MAX = 10;
const int MEAN = 11;
const int MIN = 12;
const int MOD = 13;
const int PROD = 14;
const int SUB = 15;
const int SUM = 16;
const int ADD = 17;
const int DIV = 18;
const int WHERE = 19;


void nary_add()
{
    //TODO(VK) finish nary_add here 
    
}


void main()
{
    debugPrintfEXT("nary_eltwise.comp loaded\n");
    int mIndex = int(gl_WorkGroupID.x) * BLOCK_SIZE;
    int nIndex = int(gl_WorkGroupID.y) * BLOCK_SIZE;

    int local_x = int(gl_LocalInvocationID.x) % 16; // 0~7
    int local_y = int(gl_LocalInvocationID.x) / 16; // 0~31

    int a_local_x = int(gl_LocalInvocationID.x) % KSTRIP_LEN; // 256 / 32 = 8
    int a_local_y = int(gl_LocalInvocationID.x) / KSTRIP_LEN;

    int b_local_x = int(gl_LocalInvocationID.x) % BLOCK_SIZE; // 256 / 64 = 4
    int b_local_y = int(gl_LocalInvocationID.x) / BLOCK_SIZE;

    switch (params.opType)
    {
        case int(ADD):
            nary_add();
            break;
    }

    return;
}
